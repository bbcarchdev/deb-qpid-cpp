# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cqmf2', [dirname(__file__)])
        except ImportError:
            import _cqmf2
            return _cqmf2
        if fp is not None:
            try:
                _mod = imp.load_module('_cqmf2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cqmf2 = swig_import_helper()
    del swig_import_helper
else:
    import _cqmf2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Duration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Duration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_Duration(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMilliseconds(self): return _cqmf2.Duration_getMilliseconds(self)
    __swig_destroy__ = _cqmf2.delete_Duration
    __del__ = lambda self : None;
Duration_swigregister = _cqmf2.Duration_swigregister
Duration_swigregister(Duration)
cvar = _cqmf2.cvar
Duration.FOREVER = _cqmf2.cvar.Duration_FOREVER
Duration.IMMEDIATE = _cqmf2.cvar.Duration_IMMEDIATE
Duration.SECOND = _cqmf2.cvar.Duration_SECOND
Duration.MINUTE = _cqmf2.cvar.Duration_MINUTE


def __eq__(*args):
  return _cqmf2.__eq__(*args)
__eq__ = _cqmf2.__eq__

def __ne__(*args):
  return _cqmf2.__ne__(*args)
__ne__ = _cqmf2.__ne__
class QmfException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QmfException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QmfException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_QmfException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_QmfException
    __del__ = lambda self : None;
    __swig_setmethods__["detail"] = _cqmf2.QmfException_detail_set
    __swig_getmethods__["detail"] = _cqmf2.QmfException_detail_get
    if _newclass:detail = _swig_property(_cqmf2.QmfException_detail_get, _cqmf2.QmfException_detail_set)
QmfException_swigregister = _cqmf2.QmfException_swigregister
QmfException_swigregister(QmfException)

def __mul__(*args):
  return _cqmf2.__mul__(*args)
__mul__ = _cqmf2.__mul__

class KeyNotFound(QmfException):
    __swig_setmethods__ = {}
    for _s in [QmfException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [QmfException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyNotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_KeyNotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_KeyNotFound
    __del__ = lambda self : None;
KeyNotFound_swigregister = _cqmf2.KeyNotFound_swigregister
KeyNotFound_swigregister(KeyNotFound)

class IndexOutOfRange(QmfException):
    __swig_setmethods__ = {}
    for _s in [QmfException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfRange, name, value)
    __swig_getmethods__ = {}
    for _s in [QmfException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfRange, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cqmf2.new_IndexOutOfRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_IndexOutOfRange
    __del__ = lambda self : None;
IndexOutOfRange_swigregister = _cqmf2.IndexOutOfRange_swigregister
IndexOutOfRange_swigregister(IndexOutOfRange)

class OperationTimedOut(QmfException):
    __swig_setmethods__ = {}
    for _s in [QmfException]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperationTimedOut, name, value)
    __swig_getmethods__ = {}
    for _s in [QmfException]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OperationTimedOut, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cqmf2.new_OperationTimedOut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_OperationTimedOut
    __del__ = lambda self : None;
OperationTimedOut_swigregister = _cqmf2.OperationTimedOut_swigregister
OperationTimedOut_swigregister(OperationTimedOut)

AGENT_AUTH_QUERY = _cqmf2.AGENT_AUTH_QUERY
AGENT_AUTH_SUBSCRIBE = _cqmf2.AGENT_AUTH_SUBSCRIBE
AGENT_QUERY = _cqmf2.AGENT_QUERY
AGENT_METHOD = _cqmf2.AGENT_METHOD
AGENT_SUBSCRIBE_BEGIN = _cqmf2.AGENT_SUBSCRIBE_BEGIN
AGENT_SUBSCRIBE_TOUCH = _cqmf2.AGENT_SUBSCRIBE_TOUCH
AGENT_SUBSCRIBE_END = _cqmf2.AGENT_SUBSCRIBE_END
AGENT_THREAD_FAILED = _cqmf2.AGENT_THREAD_FAILED
class AgentEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_AgentEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_AgentEvent
    __del__ = lambda self : None;
    def getType(self): return _cqmf2.AgentEvent_getType(self)
    def getUserId(self): return _cqmf2.AgentEvent_getUserId(self)
    def getQuery(self): return _cqmf2.AgentEvent_getQuery(self)
    def hasDataAddr(self): return _cqmf2.AgentEvent_hasDataAddr(self)
    def getDataAddr(self): return _cqmf2.AgentEvent_getDataAddr(self)
    def getMethodName(self): return _cqmf2.AgentEvent_getMethodName(self)
    def getArguments(self): return _cqmf2.AgentEvent_getArguments(self)
    def getArgumentSubtypes(self): return _cqmf2.AgentEvent_getArgumentSubtypes(self)
    def addReturnArgument(self, *args): return _cqmf2.AgentEvent_addReturnArgument(self, *args)
AgentEvent_swigregister = _cqmf2.AgentEvent_swigregister
AgentEvent_swigregister(AgentEvent)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_Agent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_Agent
    __del__ = lambda self : None;
    def getName(self): return _cqmf2.Agent_getName(self)
    def getEpoch(self): return _cqmf2.Agent_getEpoch(self)
    def getVendor(self): return _cqmf2.Agent_getVendor(self)
    def getProduct(self): return _cqmf2.Agent_getProduct(self)
    def getInstance(self): return _cqmf2.Agent_getInstance(self)
    def getAttribute(self, *args): return _cqmf2.Agent_getAttribute(self, *args)
    def getAttributes(self): return _cqmf2.Agent_getAttributes(self)
    def query(self, *args): return _cqmf2.Agent_query(self, *args)
    def queryAsync(self, *args): return _cqmf2.Agent_queryAsync(self, *args)
    def callMethod(self, *args): return _cqmf2.Agent_callMethod(self, *args)
    def callMethodAsync(self, *args): return _cqmf2.Agent_callMethodAsync(self, *args)
    def querySchema(self, *args): return _cqmf2.Agent_querySchema(self, *args)
    def querySchemaAsync(self): return _cqmf2.Agent_querySchemaAsync(self)
    def getPackageCount(self): return _cqmf2.Agent_getPackageCount(self)
    def getPackage(self, *args): return _cqmf2.Agent_getPackage(self, *args)
    def getSchemaIdCount(self, *args): return _cqmf2.Agent_getSchemaIdCount(self, *args)
    def getSchemaId(self, *args): return _cqmf2.Agent_getSchemaId(self, *args)
    def getSchema(self, *args): return _cqmf2.Agent_getSchema(self, *args)
Agent_swigregister = _cqmf2.Agent_swigregister
Agent_swigregister(Agent)

class AgentSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentSession, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_AgentSession
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_AgentSession(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDomain(self, *args): return _cqmf2.AgentSession_setDomain(self, *args)
    def setVendor(self, *args): return _cqmf2.AgentSession_setVendor(self, *args)
    def setProduct(self, *args): return _cqmf2.AgentSession_setProduct(self, *args)
    def setInstance(self, *args): return _cqmf2.AgentSession_setInstance(self, *args)
    def setAttribute(self, *args): return _cqmf2.AgentSession_setAttribute(self, *args)
    def getName(self): return _cqmf2.AgentSession_getName(self)
    def open(self): return _cqmf2.AgentSession_open(self)
    def close(self): return _cqmf2.AgentSession_close(self)
    def nextEvent(self, *args): return _cqmf2.AgentSession_nextEvent(self, *args)
    def pendingEvents(self): return _cqmf2.AgentSession_pendingEvents(self)
    def registerSchema(self, *args): return _cqmf2.AgentSession_registerSchema(self, *args)
    def addData(self, *args): return _cqmf2.AgentSession_addData(self, *args)
    def delData(self, *args): return _cqmf2.AgentSession_delData(self, *args)
    def authAccept(self, *args): return _cqmf2.AgentSession_authAccept(self, *args)
    def authReject(self, *args): return _cqmf2.AgentSession_authReject(self, *args)
    def raiseException(self, *args): return _cqmf2.AgentSession_raiseException(self, *args)
    def response(self, *args): return _cqmf2.AgentSession_response(self, *args)
    def complete(self, *args): return _cqmf2.AgentSession_complete(self, *args)
    def methodSuccess(self, *args): return _cqmf2.AgentSession_methodSuccess(self, *args)
    def raiseEvent(self, *args): return _cqmf2.AgentSession_raiseEvent(self, *args)
AgentSession_swigregister = _cqmf2.AgentSession_swigregister
AgentSession_swigregister(AgentSession)

CONSOLE_AGENT_ADD = _cqmf2.CONSOLE_AGENT_ADD
CONSOLE_AGENT_DEL = _cqmf2.CONSOLE_AGENT_DEL
CONSOLE_AGENT_RESTART = _cqmf2.CONSOLE_AGENT_RESTART
CONSOLE_AGENT_SCHEMA_UPDATE = _cqmf2.CONSOLE_AGENT_SCHEMA_UPDATE
CONSOLE_AGENT_SCHEMA_RESPONSE = _cqmf2.CONSOLE_AGENT_SCHEMA_RESPONSE
CONSOLE_EVENT = _cqmf2.CONSOLE_EVENT
CONSOLE_QUERY_RESPONSE = _cqmf2.CONSOLE_QUERY_RESPONSE
CONSOLE_METHOD_RESPONSE = _cqmf2.CONSOLE_METHOD_RESPONSE
CONSOLE_EXCEPTION = _cqmf2.CONSOLE_EXCEPTION
CONSOLE_SUBSCRIBE_ADD = _cqmf2.CONSOLE_SUBSCRIBE_ADD
CONSOLE_SUBSCRIBE_UPDATE = _cqmf2.CONSOLE_SUBSCRIBE_UPDATE
CONSOLE_SUBSCRIBE_DEL = _cqmf2.CONSOLE_SUBSCRIBE_DEL
CONSOLE_THREAD_FAILED = _cqmf2.CONSOLE_THREAD_FAILED
AGENT_DEL_AGED = _cqmf2.AGENT_DEL_AGED
AGENT_DEL_FILTER = _cqmf2.AGENT_DEL_FILTER
class ConsoleEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_ConsoleEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_ConsoleEvent
    __del__ = lambda self : None;
    def getType(self): return _cqmf2.ConsoleEvent_getType(self)
    def getCorrelator(self): return _cqmf2.ConsoleEvent_getCorrelator(self)
    def getAgent(self): return _cqmf2.ConsoleEvent_getAgent(self)
    def getAgentDelReason(self): return _cqmf2.ConsoleEvent_getAgentDelReason(self)
    def getSchemaIdCount(self): return _cqmf2.ConsoleEvent_getSchemaIdCount(self)
    def getSchemaId(self, *args): return _cqmf2.ConsoleEvent_getSchemaId(self, *args)
    def getDataCount(self): return _cqmf2.ConsoleEvent_getDataCount(self)
    def getData(self, *args): return _cqmf2.ConsoleEvent_getData(self, *args)
    def isFinal(self): return _cqmf2.ConsoleEvent_isFinal(self)
    def getArguments(self): return _cqmf2.ConsoleEvent_getArguments(self)
    def getSeverity(self): return _cqmf2.ConsoleEvent_getSeverity(self)
    def getTimestamp(self): return _cqmf2.ConsoleEvent_getTimestamp(self)
ConsoleEvent_swigregister = _cqmf2.ConsoleEvent_swigregister
ConsoleEvent_swigregister(ConsoleEvent)

class ConsoleSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleSession, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_ConsoleSession
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_ConsoleSession(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDomain(self, *args): return _cqmf2.ConsoleSession_setDomain(self, *args)
    def setAgentFilter(self, *args): return _cqmf2.ConsoleSession_setAgentFilter(self, *args)
    def open(self): return _cqmf2.ConsoleSession_open(self)
    def close(self): return _cqmf2.ConsoleSession_close(self)
    def nextEvent(self, *args): return _cqmf2.ConsoleSession_nextEvent(self, *args)
    def pendingEvents(self): return _cqmf2.ConsoleSession_pendingEvents(self)
    def getAgentCount(self): return _cqmf2.ConsoleSession_getAgentCount(self)
    def getAgent(self, *args): return _cqmf2.ConsoleSession_getAgent(self, *args)
    def getConnectedBrokerAgent(self): return _cqmf2.ConsoleSession_getConnectedBrokerAgent(self)
    def subscribe(self, *args): return _cqmf2.ConsoleSession_subscribe(self, *args)
ConsoleSession_swigregister = _cqmf2.ConsoleSession_swigregister
ConsoleSession_swigregister(ConsoleSession)

class DataAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataAddr, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_DataAddr
    __del__ = lambda self : None;
    def __eq__(self, *args): return _cqmf2.DataAddr___eq__(self, *args)
    def __lt__(self, *args): return _cqmf2.DataAddr___lt__(self, *args)
    def __init__(self, *args): 
        this = _cqmf2.new_DataAddr(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _cqmf2.DataAddr_getName(self)
    def getAgentName(self): return _cqmf2.DataAddr_getAgentName(self)
    def getAgentEpoch(self): return _cqmf2.DataAddr_getAgentEpoch(self)
    def asMap(self): return _cqmf2.DataAddr_asMap(self)
DataAddr_swigregister = _cqmf2.DataAddr_swigregister
DataAddr_swigregister(DataAddr)

class Data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Data, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_Data
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_Data(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAddr(self, *args): return _cqmf2.Data_setAddr(self, *args)
    def setProperty(self, *args): return _cqmf2.Data_setProperty(self, *args)
    def overwriteProperties(self, *args): return _cqmf2.Data_overwriteProperties(self, *args)
    def hasSchema(self): return _cqmf2.Data_hasSchema(self)
    def hasAddr(self): return _cqmf2.Data_hasAddr(self)
    def getSchemaId(self): return _cqmf2.Data_getSchemaId(self)
    def getAddr(self): return _cqmf2.Data_getAddr(self)
    def getProperty(self, *args): return _cqmf2.Data_getProperty(self, *args)
    def getProperties(self): return _cqmf2.Data_getProperties(self)
    def hasAgent(self): return _cqmf2.Data_hasAgent(self)
    def getAgent(self): return _cqmf2.Data_getAgent(self)
Data_swigregister = _cqmf2.Data_swigregister
Data_swigregister(Data)

QUERY_OBJECT = _cqmf2.QUERY_OBJECT
QUERY_OBJECT_ID = _cqmf2.QUERY_OBJECT_ID
QUERY_SCHEMA = _cqmf2.QUERY_SCHEMA
QUERY_SCHEMA_ID = _cqmf2.QUERY_SCHEMA_ID
class Query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_Query
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_Query(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTarget(self): return _cqmf2.Query_getTarget(self)
    def getDataAddr(self): return _cqmf2.Query_getDataAddr(self)
    def getSchemaId(self): return _cqmf2.Query_getSchemaId(self)
    def setPredicate(self, *args): return _cqmf2.Query_setPredicate(self, *args)
    def getPredicate(self): return _cqmf2.Query_getPredicate(self)
    def matchesPredicate(self, *args): return _cqmf2.Query_matchesPredicate(self, *args)
Query_swigregister = _cqmf2.Query_swigregister
Query_swigregister(Query)

class Schema(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Schema, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Schema, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_Schema
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_Schema(*args)
        try: self.this.append(this)
        except: self.this = this
    def getSchemaId(self): return _cqmf2.Schema_getSchemaId(self)
    def finalize(self): return _cqmf2.Schema_finalize(self)
    def isFinalized(self): return _cqmf2.Schema_isFinalized(self)
    def addProperty(self, *args): return _cqmf2.Schema_addProperty(self, *args)
    def addMethod(self, *args): return _cqmf2.Schema_addMethod(self, *args)
    def setDesc(self, *args): return _cqmf2.Schema_setDesc(self, *args)
    def getDesc(self): return _cqmf2.Schema_getDesc(self)
    def setDefaultSeverity(self, *args): return _cqmf2.Schema_setDefaultSeverity(self, *args)
    def getDefaultSeverity(self): return _cqmf2.Schema_getDefaultSeverity(self)
    def getPropertyCount(self): return _cqmf2.Schema_getPropertyCount(self)
    def getProperty(self, *args): return _cqmf2.Schema_getProperty(self, *args)
    def getMethodCount(self): return _cqmf2.Schema_getMethodCount(self)
    def getMethod(self, *args): return _cqmf2.Schema_getMethod(self, *args)
Schema_swigregister = _cqmf2.Schema_swigregister
Schema_swigregister(Schema)

class SchemaId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaId, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_SchemaId
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_SchemaId(*args)
        try: self.this.append(this)
        except: self.this = this
    def setHash(self, *args): return _cqmf2.SchemaId_setHash(self, *args)
    def getType(self): return _cqmf2.SchemaId_getType(self)
    def getPackageName(self): return _cqmf2.SchemaId_getPackageName(self)
    def getName(self): return _cqmf2.SchemaId_getName(self)
    def getHash(self): return _cqmf2.SchemaId_getHash(self)
SchemaId_swigregister = _cqmf2.SchemaId_swigregister
SchemaId_swigregister(SchemaId)

class SchemaMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaMethod, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_SchemaMethod
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_SchemaMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    def setDesc(self, *args): return _cqmf2.SchemaMethod_setDesc(self, *args)
    def addArgument(self, *args): return _cqmf2.SchemaMethod_addArgument(self, *args)
    def getName(self): return _cqmf2.SchemaMethod_getName(self)
    def getDesc(self): return _cqmf2.SchemaMethod_getDesc(self)
    def getArgumentCount(self): return _cqmf2.SchemaMethod_getArgumentCount(self)
    def getArgument(self, *args): return _cqmf2.SchemaMethod_getArgument(self, *args)
SchemaMethod_swigregister = _cqmf2.SchemaMethod_swigregister
SchemaMethod_swigregister(SchemaMethod)

class SchemaProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaProperty, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cqmf2.delete_SchemaProperty
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _cqmf2.new_SchemaProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAccess(self, *args): return _cqmf2.SchemaProperty_setAccess(self, *args)
    def setIndex(self, *args): return _cqmf2.SchemaProperty_setIndex(self, *args)
    def setOptional(self, *args): return _cqmf2.SchemaProperty_setOptional(self, *args)
    def setUnit(self, *args): return _cqmf2.SchemaProperty_setUnit(self, *args)
    def setDesc(self, *args): return _cqmf2.SchemaProperty_setDesc(self, *args)
    def setSubtype(self, *args): return _cqmf2.SchemaProperty_setSubtype(self, *args)
    def setDirection(self, *args): return _cqmf2.SchemaProperty_setDirection(self, *args)
    def getName(self): return _cqmf2.SchemaProperty_getName(self)
    def getType(self): return _cqmf2.SchemaProperty_getType(self)
    def getAccess(self): return _cqmf2.SchemaProperty_getAccess(self)
    def isIndex(self): return _cqmf2.SchemaProperty_isIndex(self)
    def isOptional(self): return _cqmf2.SchemaProperty_isOptional(self)
    def getUnit(self): return _cqmf2.SchemaProperty_getUnit(self)
    def getDesc(self): return _cqmf2.SchemaProperty_getDesc(self)
    def getSubtype(self): return _cqmf2.SchemaProperty_getSubtype(self)
    def getDirection(self): return _cqmf2.SchemaProperty_getDirection(self)
SchemaProperty_swigregister = _cqmf2.SchemaProperty_swigregister
SchemaProperty_swigregister(SchemaProperty)

class Subscription(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subscription, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Subscription, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cqmf2.new_Subscription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cqmf2.delete_Subscription
    __del__ = lambda self : None;
    def cancel(self): return _cqmf2.Subscription_cancel(self)
    def isActive(self): return _cqmf2.Subscription_isActive(self)
    def lock(self): return _cqmf2.Subscription_lock(self)
    def unlock(self): return _cqmf2.Subscription_unlock(self)
    def getDataCount(self): return _cqmf2.Subscription_getDataCount(self)
    def getData(self, *args): return _cqmf2.Subscription_getData(self, *args)
Subscription_swigregister = _cqmf2.Subscription_swigregister
Subscription_swigregister(Subscription)
SCHEMA_TYPE_DATA = cvar.SCHEMA_TYPE_DATA
SCHEMA_TYPE_EVENT = cvar.SCHEMA_TYPE_EVENT
SCHEMA_DATA_VOID = cvar.SCHEMA_DATA_VOID
SCHEMA_DATA_BOOL = cvar.SCHEMA_DATA_BOOL
SCHEMA_DATA_INT = cvar.SCHEMA_DATA_INT
SCHEMA_DATA_FLOAT = cvar.SCHEMA_DATA_FLOAT
SCHEMA_DATA_STRING = cvar.SCHEMA_DATA_STRING
SCHEMA_DATA_MAP = cvar.SCHEMA_DATA_MAP
SCHEMA_DATA_LIST = cvar.SCHEMA_DATA_LIST
SCHEMA_DATA_UUID = cvar.SCHEMA_DATA_UUID
ACCESS_READ_CREATE = cvar.ACCESS_READ_CREATE
ACCESS_READ_WRITE = cvar.ACCESS_READ_WRITE
ACCESS_READ_ONLY = cvar.ACCESS_READ_ONLY
DIR_IN = cvar.DIR_IN
DIR_OUT = cvar.DIR_OUT
DIR_IN_OUT = cvar.DIR_IN_OUT
SEV_EMERG = cvar.SEV_EMERG
SEV_ALERT = cvar.SEV_ALERT
SEV_CRIT = cvar.SEV_CRIT
SEV_ERROR = cvar.SEV_ERROR
SEV_WARN = cvar.SEV_WARN
SEV_NOTICE = cvar.SEV_NOTICE
SEV_INFORM = cvar.SEV_INFORM
SEV_DEBUG = cvar.SEV_DEBUG

# This file is compatible with both classic and new-style classes.


