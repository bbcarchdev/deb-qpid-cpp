# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qmfengine', [dirname(__file__)])
        except ImportError:
            import _qmfengine
            return _qmfengine
        if fp is not None:
            try:
                _mod = imp.load_module('_qmfengine', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _qmfengine = swig_import_helper()
    del swig_import_helper
else:
    import _qmfengine
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


O_EQ = _qmfengine.O_EQ
O_NE = _qmfengine.O_NE
O_LT = _qmfengine.O_LT
O_LE = _qmfengine.O_LE
O_GT = _qmfengine.O_GT
O_GE = _qmfengine.O_GE
O_RE_MATCH = _qmfengine.O_RE_MATCH
O_RE_NOMATCH = _qmfengine.O_RE_NOMATCH
O_PRESENT = _qmfengine.O_PRESENT
O_NOT_PRESENT = _qmfengine.O_NOT_PRESENT
class QueryOperand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryOperand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QueryOperand, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _qmfengine.delete_QueryOperand
    __del__ = lambda self : None;
    def evaluate(self, *args): return _qmfengine.QueryOperand_evaluate(self, *args)
QueryOperand_swigregister = _qmfengine.QueryOperand_swigregister
QueryOperand_swigregister(QueryOperand)

class QueryElement(QueryOperand):
    __swig_setmethods__ = {}
    for _s in [QueryOperand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryElement, name, value)
    __swig_getmethods__ = {}
    for _s in [QueryOperand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QueryElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_QueryElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_QueryElement
    __del__ = lambda self : None;
    def evaluate(self, *args): return _qmfengine.QueryElement_evaluate(self, *args)
    __swig_setmethods__["impl"] = _qmfengine.QueryElement_impl_set
    __swig_getmethods__["impl"] = _qmfengine.QueryElement_impl_get
    if _newclass:impl = _swig_property(_qmfengine.QueryElement_impl_get, _qmfengine.QueryElement_impl_set)
QueryElement_swigregister = _qmfengine.QueryElement_swigregister
QueryElement_swigregister(QueryElement)

E_NOT = _qmfengine.E_NOT
E_AND = _qmfengine.E_AND
E_OR = _qmfengine.E_OR
E_XOR = _qmfengine.E_XOR
class QueryExpression(QueryOperand):
    __swig_setmethods__ = {}
    for _s in [QueryOperand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryExpression, name, value)
    __swig_getmethods__ = {}
    for _s in [QueryOperand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QueryExpression, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_QueryExpression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_QueryExpression
    __del__ = lambda self : None;
    def evaluate(self, *args): return _qmfengine.QueryExpression_evaluate(self, *args)
    __swig_setmethods__["impl"] = _qmfengine.QueryExpression_impl_set
    __swig_getmethods__["impl"] = _qmfengine.QueryExpression_impl_get
    if _newclass:impl = _swig_property(_qmfengine.QueryExpression_impl_get, _qmfengine.QueryExpression_impl_set)
QueryExpression_swigregister = _qmfengine.QueryExpression_swigregister
QueryExpression_swigregister(QueryExpression)

class Query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Query(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Query
    __del__ = lambda self : None;
    def setSelect(self, *args): return _qmfengine.Query_setSelect(self, *args)
    def setLimit(self, *args): return _qmfengine.Query_setLimit(self, *args)
    def setOrderBy(self, *args): return _qmfengine.Query_setOrderBy(self, *args)
    def getPackage(self): return _qmfengine.Query_getPackage(self)
    def getClass(self): return _qmfengine.Query_getClass(self)
    def getObjectId(self): return _qmfengine.Query_getObjectId(self)
    def haveSelect(self): return _qmfengine.Query_haveSelect(self)
    def haveLimit(self): return _qmfengine.Query_haveLimit(self)
    def haveOrderBy(self): return _qmfengine.Query_haveOrderBy(self)
    def getSelect(self): return _qmfengine.Query_getSelect(self)
    def getLimit(self): return _qmfengine.Query_getLimit(self)
    def getOrderBy(self): return _qmfengine.Query_getOrderBy(self)
    def getDecreasing(self): return _qmfengine.Query_getDecreasing(self)
Query_swigregister = _qmfengine.Query_swigregister
Query_swigregister(Query)

class Message(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["body"] = _qmfengine.Message_body_set
    __swig_getmethods__["body"] = _qmfengine.Message_body_get
    if _newclass:body = _swig_property(_qmfengine.Message_body_get, _qmfengine.Message_body_set)
    __swig_setmethods__["length"] = _qmfengine.Message_length_set
    __swig_getmethods__["length"] = _qmfengine.Message_length_get
    if _newclass:length = _swig_property(_qmfengine.Message_length_get, _qmfengine.Message_length_set)
    __swig_setmethods__["destination"] = _qmfengine.Message_destination_set
    __swig_getmethods__["destination"] = _qmfengine.Message_destination_get
    if _newclass:destination = _swig_property(_qmfengine.Message_destination_get, _qmfengine.Message_destination_set)
    __swig_setmethods__["routingKey"] = _qmfengine.Message_routingKey_set
    __swig_getmethods__["routingKey"] = _qmfengine.Message_routingKey_get
    if _newclass:routingKey = _swig_property(_qmfengine.Message_routingKey_get, _qmfengine.Message_routingKey_set)
    __swig_setmethods__["replyExchange"] = _qmfengine.Message_replyExchange_set
    __swig_getmethods__["replyExchange"] = _qmfengine.Message_replyExchange_get
    if _newclass:replyExchange = _swig_property(_qmfengine.Message_replyExchange_get, _qmfengine.Message_replyExchange_set)
    __swig_setmethods__["replyKey"] = _qmfengine.Message_replyKey_set
    __swig_getmethods__["replyKey"] = _qmfengine.Message_replyKey_get
    if _newclass:replyKey = _swig_property(_qmfengine.Message_replyKey_get, _qmfengine.Message_replyKey_set)
    __swig_setmethods__["userId"] = _qmfengine.Message_userId_set
    __swig_getmethods__["userId"] = _qmfengine.Message_userId_get
    if _newclass:userId = _swig_property(_qmfengine.Message_userId_get, _qmfengine.Message_userId_set)
    def __init__(self): 
        this = _qmfengine.new_Message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Message
    __del__ = lambda self : None;
Message_swigregister = _qmfengine.Message_swigregister
Message_swigregister(Message)

class AgentEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentEvent, name)
    __repr__ = _swig_repr
    GET_QUERY = _qmfengine.AgentEvent_GET_QUERY
    START_SYNC = _qmfengine.AgentEvent_START_SYNC
    END_SYNC = _qmfengine.AgentEvent_END_SYNC
    METHOD_CALL = _qmfengine.AgentEvent_METHOD_CALL
    DECLARE_QUEUE = _qmfengine.AgentEvent_DECLARE_QUEUE
    DELETE_QUEUE = _qmfengine.AgentEvent_DELETE_QUEUE
    BIND = _qmfengine.AgentEvent_BIND
    UNBIND = _qmfengine.AgentEvent_UNBIND
    SETUP_COMPLETE = _qmfengine.AgentEvent_SETUP_COMPLETE
    __swig_setmethods__["kind"] = _qmfengine.AgentEvent_kind_set
    __swig_getmethods__["kind"] = _qmfengine.AgentEvent_kind_get
    if _newclass:kind = _swig_property(_qmfengine.AgentEvent_kind_get, _qmfengine.AgentEvent_kind_set)
    __swig_setmethods__["sequence"] = _qmfengine.AgentEvent_sequence_set
    __swig_getmethods__["sequence"] = _qmfengine.AgentEvent_sequence_get
    if _newclass:sequence = _swig_property(_qmfengine.AgentEvent_sequence_get, _qmfengine.AgentEvent_sequence_set)
    __swig_setmethods__["authUserId"] = _qmfengine.AgentEvent_authUserId_set
    __swig_getmethods__["authUserId"] = _qmfengine.AgentEvent_authUserId_get
    if _newclass:authUserId = _swig_property(_qmfengine.AgentEvent_authUserId_get, _qmfengine.AgentEvent_authUserId_set)
    __swig_setmethods__["authToken"] = _qmfengine.AgentEvent_authToken_set
    __swig_getmethods__["authToken"] = _qmfengine.AgentEvent_authToken_get
    if _newclass:authToken = _swig_property(_qmfengine.AgentEvent_authToken_get, _qmfengine.AgentEvent_authToken_set)
    __swig_setmethods__["name"] = _qmfengine.AgentEvent_name_set
    __swig_getmethods__["name"] = _qmfengine.AgentEvent_name_get
    if _newclass:name = _swig_property(_qmfengine.AgentEvent_name_get, _qmfengine.AgentEvent_name_set)
    __swig_setmethods__["object"] = _qmfengine.AgentEvent_object_set
    __swig_getmethods__["object"] = _qmfengine.AgentEvent_object_get
    if _newclass:object = _swig_property(_qmfengine.AgentEvent_object_get, _qmfengine.AgentEvent_object_set)
    __swig_setmethods__["objectId"] = _qmfengine.AgentEvent_objectId_set
    __swig_getmethods__["objectId"] = _qmfengine.AgentEvent_objectId_get
    if _newclass:objectId = _swig_property(_qmfengine.AgentEvent_objectId_get, _qmfengine.AgentEvent_objectId_set)
    __swig_setmethods__["query"] = _qmfengine.AgentEvent_query_set
    __swig_getmethods__["query"] = _qmfengine.AgentEvent_query_get
    if _newclass:query = _swig_property(_qmfengine.AgentEvent_query_get, _qmfengine.AgentEvent_query_set)
    __swig_setmethods__["arguments"] = _qmfengine.AgentEvent_arguments_set
    __swig_getmethods__["arguments"] = _qmfengine.AgentEvent_arguments_get
    if _newclass:arguments = _swig_property(_qmfengine.AgentEvent_arguments_get, _qmfengine.AgentEvent_arguments_set)
    __swig_setmethods__["exchange"] = _qmfengine.AgentEvent_exchange_set
    __swig_getmethods__["exchange"] = _qmfengine.AgentEvent_exchange_get
    if _newclass:exchange = _swig_property(_qmfengine.AgentEvent_exchange_get, _qmfengine.AgentEvent_exchange_set)
    __swig_setmethods__["bindingKey"] = _qmfengine.AgentEvent_bindingKey_set
    __swig_getmethods__["bindingKey"] = _qmfengine.AgentEvent_bindingKey_get
    if _newclass:bindingKey = _swig_property(_qmfengine.AgentEvent_bindingKey_get, _qmfengine.AgentEvent_bindingKey_set)
    __swig_setmethods__["objectClass"] = _qmfengine.AgentEvent_objectClass_set
    __swig_getmethods__["objectClass"] = _qmfengine.AgentEvent_objectClass_get
    if _newclass:objectClass = _swig_property(_qmfengine.AgentEvent_objectClass_get, _qmfengine.AgentEvent_objectClass_set)
    def __init__(self): 
        this = _qmfengine.new_AgentEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_AgentEvent
    __del__ = lambda self : None;
AgentEvent_swigregister = _qmfengine.AgentEvent_swigregister
AgentEvent_swigregister(AgentEvent)

class Agent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Agent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Agent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Agent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Agent
    __del__ = lambda self : None;
    def setStoreDir(self, *args): return _qmfengine.Agent_setStoreDir(self, *args)
    def setTransferDir(self, *args): return _qmfengine.Agent_setTransferDir(self, *args)
    def handleRcvMessage(self, *args): return _qmfengine.Agent_handleRcvMessage(self, *args)
    def getXmtMessage(self, *args): return _qmfengine.Agent_getXmtMessage(self, *args)
    def popXmt(self): return _qmfengine.Agent_popXmt(self)
    def getEvent(self, *args): return _qmfengine.Agent_getEvent(self, *args)
    def popEvent(self): return _qmfengine.Agent_popEvent(self)
    def newSession(self): return _qmfengine.Agent_newSession(self)
    def startProtocol(self): return _qmfengine.Agent_startProtocol(self)
    def heartbeat(self): return _qmfengine.Agent_heartbeat(self)
    def methodResponse(self, *args): return _qmfengine.Agent_methodResponse(self, *args)
    def queryResponse(self, *args): return _qmfengine.Agent_queryResponse(self, *args)
    def queryComplete(self, *args): return _qmfengine.Agent_queryComplete(self, *args)
    def registerClass(self, *args): return _qmfengine.Agent_registerClass(self, *args)
    def addObject(self, *args): return _qmfengine.Agent_addObject(self, *args)
    def allocObjectId(self, *args): return _qmfengine.Agent_allocObjectId(self, *args)
    def raiseEvent(self, *args): return _qmfengine.Agent_raiseEvent(self, *args)
Agent_swigregister = _qmfengine.Agent_swigregister
Agent_swigregister(Agent)

class MethodResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MethodResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MethodResponse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_MethodResponse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_MethodResponse
    __del__ = lambda self : None;
    def getStatus(self): return _qmfengine.MethodResponse_getStatus(self)
    def getException(self): return _qmfengine.MethodResponse_getException(self)
    def getArgs(self): return _qmfengine.MethodResponse_getArgs(self)
MethodResponse_swigregister = _qmfengine.MethodResponse_swigregister
MethodResponse_swigregister(MethodResponse)

class QueryResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QueryResponse, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _qmfengine.delete_QueryResponse
    __del__ = lambda self : None;
    def getStatus(self): return _qmfengine.QueryResponse_getStatus(self)
    def getException(self): return _qmfengine.QueryResponse_getException(self)
    def getObjectCount(self): return _qmfengine.QueryResponse_getObjectCount(self)
    def getObject(self, *args): return _qmfengine.QueryResponse_getObject(self, *args)
QueryResponse_swigregister = _qmfengine.QueryResponse_swigregister
QueryResponse_swigregister(QueryResponse)

class ConsoleEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleEvent, name)
    __repr__ = _swig_repr
    AGENT_ADDED = _qmfengine.ConsoleEvent_AGENT_ADDED
    AGENT_DELETED = _qmfengine.ConsoleEvent_AGENT_DELETED
    NEW_PACKAGE = _qmfengine.ConsoleEvent_NEW_PACKAGE
    NEW_CLASS = _qmfengine.ConsoleEvent_NEW_CLASS
    OBJECT_UPDATE = _qmfengine.ConsoleEvent_OBJECT_UPDATE
    EVENT_RECEIVED = _qmfengine.ConsoleEvent_EVENT_RECEIVED
    AGENT_HEARTBEAT = _qmfengine.ConsoleEvent_AGENT_HEARTBEAT
    __swig_setmethods__["kind"] = _qmfengine.ConsoleEvent_kind_set
    __swig_getmethods__["kind"] = _qmfengine.ConsoleEvent_kind_get
    if _newclass:kind = _swig_property(_qmfengine.ConsoleEvent_kind_get, _qmfengine.ConsoleEvent_kind_set)
    __swig_setmethods__["agent"] = _qmfengine.ConsoleEvent_agent_set
    __swig_getmethods__["agent"] = _qmfengine.ConsoleEvent_agent_get
    if _newclass:agent = _swig_property(_qmfengine.ConsoleEvent_agent_get, _qmfengine.ConsoleEvent_agent_set)
    __swig_setmethods__["name"] = _qmfengine.ConsoleEvent_name_set
    __swig_getmethods__["name"] = _qmfengine.ConsoleEvent_name_get
    if _newclass:name = _swig_property(_qmfengine.ConsoleEvent_name_get, _qmfengine.ConsoleEvent_name_set)
    __swig_setmethods__["classKey"] = _qmfengine.ConsoleEvent_classKey_set
    __swig_getmethods__["classKey"] = _qmfengine.ConsoleEvent_classKey_get
    if _newclass:classKey = _swig_property(_qmfengine.ConsoleEvent_classKey_get, _qmfengine.ConsoleEvent_classKey_set)
    __swig_setmethods__["object"] = _qmfengine.ConsoleEvent_object_set
    __swig_getmethods__["object"] = _qmfengine.ConsoleEvent_object_get
    if _newclass:object = _swig_property(_qmfengine.ConsoleEvent_object_get, _qmfengine.ConsoleEvent_object_set)
    __swig_setmethods__["context"] = _qmfengine.ConsoleEvent_context_set
    __swig_getmethods__["context"] = _qmfengine.ConsoleEvent_context_get
    if _newclass:context = _swig_property(_qmfengine.ConsoleEvent_context_get, _qmfengine.ConsoleEvent_context_set)
    __swig_setmethods__["event"] = _qmfengine.ConsoleEvent_event_set
    __swig_getmethods__["event"] = _qmfengine.ConsoleEvent_event_get
    if _newclass:event = _swig_property(_qmfengine.ConsoleEvent_event_get, _qmfengine.ConsoleEvent_event_set)
    __swig_setmethods__["timestamp"] = _qmfengine.ConsoleEvent_timestamp_set
    __swig_getmethods__["timestamp"] = _qmfengine.ConsoleEvent_timestamp_get
    if _newclass:timestamp = _swig_property(_qmfengine.ConsoleEvent_timestamp_get, _qmfengine.ConsoleEvent_timestamp_set)
    __swig_setmethods__["queryResponse"] = _qmfengine.ConsoleEvent_queryResponse_set
    __swig_getmethods__["queryResponse"] = _qmfengine.ConsoleEvent_queryResponse_get
    if _newclass:queryResponse = _swig_property(_qmfengine.ConsoleEvent_queryResponse_get, _qmfengine.ConsoleEvent_queryResponse_set)
    __swig_setmethods__["hasProps"] = _qmfengine.ConsoleEvent_hasProps_set
    __swig_getmethods__["hasProps"] = _qmfengine.ConsoleEvent_hasProps_get
    if _newclass:hasProps = _swig_property(_qmfengine.ConsoleEvent_hasProps_get, _qmfengine.ConsoleEvent_hasProps_set)
    __swig_setmethods__["hasStats"] = _qmfengine.ConsoleEvent_hasStats_set
    __swig_getmethods__["hasStats"] = _qmfengine.ConsoleEvent_hasStats_get
    if _newclass:hasStats = _swig_property(_qmfengine.ConsoleEvent_hasStats_get, _qmfengine.ConsoleEvent_hasStats_set)
    def __init__(self): 
        this = _qmfengine.new_ConsoleEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ConsoleEvent
    __del__ = lambda self : None;
ConsoleEvent_swigregister = _qmfengine.ConsoleEvent_swigregister
ConsoleEvent_swigregister(ConsoleEvent)

class BrokerEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrokerEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrokerEvent, name)
    __repr__ = _swig_repr
    BROKER_INFO = _qmfengine.BrokerEvent_BROKER_INFO
    DECLARE_QUEUE = _qmfengine.BrokerEvent_DECLARE_QUEUE
    DELETE_QUEUE = _qmfengine.BrokerEvent_DELETE_QUEUE
    BIND = _qmfengine.BrokerEvent_BIND
    UNBIND = _qmfengine.BrokerEvent_UNBIND
    SETUP_COMPLETE = _qmfengine.BrokerEvent_SETUP_COMPLETE
    STABLE = _qmfengine.BrokerEvent_STABLE
    QUERY_COMPLETE = _qmfengine.BrokerEvent_QUERY_COMPLETE
    METHOD_RESPONSE = _qmfengine.BrokerEvent_METHOD_RESPONSE
    __swig_setmethods__["kind"] = _qmfengine.BrokerEvent_kind_set
    __swig_getmethods__["kind"] = _qmfengine.BrokerEvent_kind_get
    if _newclass:kind = _swig_property(_qmfengine.BrokerEvent_kind_get, _qmfengine.BrokerEvent_kind_set)
    __swig_setmethods__["name"] = _qmfengine.BrokerEvent_name_set
    __swig_getmethods__["name"] = _qmfengine.BrokerEvent_name_get
    if _newclass:name = _swig_property(_qmfengine.BrokerEvent_name_get, _qmfengine.BrokerEvent_name_set)
    __swig_setmethods__["exchange"] = _qmfengine.BrokerEvent_exchange_set
    __swig_getmethods__["exchange"] = _qmfengine.BrokerEvent_exchange_get
    if _newclass:exchange = _swig_property(_qmfengine.BrokerEvent_exchange_get, _qmfengine.BrokerEvent_exchange_set)
    __swig_setmethods__["bindingKey"] = _qmfengine.BrokerEvent_bindingKey_set
    __swig_getmethods__["bindingKey"] = _qmfengine.BrokerEvent_bindingKey_get
    if _newclass:bindingKey = _swig_property(_qmfengine.BrokerEvent_bindingKey_get, _qmfengine.BrokerEvent_bindingKey_set)
    __swig_setmethods__["context"] = _qmfengine.BrokerEvent_context_set
    __swig_getmethods__["context"] = _qmfengine.BrokerEvent_context_get
    if _newclass:context = _swig_property(_qmfengine.BrokerEvent_context_get, _qmfengine.BrokerEvent_context_set)
    __swig_setmethods__["queryResponse"] = _qmfengine.BrokerEvent_queryResponse_set
    __swig_getmethods__["queryResponse"] = _qmfengine.BrokerEvent_queryResponse_get
    if _newclass:queryResponse = _swig_property(_qmfengine.BrokerEvent_queryResponse_get, _qmfengine.BrokerEvent_queryResponse_set)
    __swig_setmethods__["methodResponse"] = _qmfengine.BrokerEvent_methodResponse_set
    __swig_getmethods__["methodResponse"] = _qmfengine.BrokerEvent_methodResponse_get
    if _newclass:methodResponse = _swig_property(_qmfengine.BrokerEvent_methodResponse_get, _qmfengine.BrokerEvent_methodResponse_set)
    def __init__(self): 
        this = _qmfengine.new_BrokerEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_BrokerEvent
    __del__ = lambda self : None;
BrokerEvent_swigregister = _qmfengine.BrokerEvent_swigregister
BrokerEvent_swigregister(BrokerEvent)

class AgentProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_AgentProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_AgentProxy
    __del__ = lambda self : None;
    def getLabel(self): return _qmfengine.AgentProxy_getLabel(self)
    def getBrokerBank(self): return _qmfengine.AgentProxy_getBrokerBank(self)
    def getAgentBank(self): return _qmfengine.AgentProxy_getAgentBank(self)
AgentProxy_swigregister = _qmfengine.AgentProxy_swigregister
AgentProxy_swigregister(AgentProxy)

class BrokerProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrokerProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BrokerProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_BrokerProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_BrokerProxy
    __del__ = lambda self : None;
    def sessionOpened(self, *args): return _qmfengine.BrokerProxy_sessionOpened(self, *args)
    def sessionClosed(self): return _qmfengine.BrokerProxy_sessionClosed(self)
    def startProtocol(self): return _qmfengine.BrokerProxy_startProtocol(self)
    def handleRcvMessage(self, *args): return _qmfengine.BrokerProxy_handleRcvMessage(self, *args)
    def getXmtMessage(self, *args): return _qmfengine.BrokerProxy_getXmtMessage(self, *args)
    def popXmt(self): return _qmfengine.BrokerProxy_popXmt(self)
    def getEvent(self, *args): return _qmfengine.BrokerProxy_getEvent(self, *args)
    def popEvent(self): return _qmfengine.BrokerProxy_popEvent(self)
    def agentCount(self): return _qmfengine.BrokerProxy_agentCount(self)
    def getAgent(self, *args): return _qmfengine.BrokerProxy_getAgent(self, *args)
    def sendQuery(self, *args): return _qmfengine.BrokerProxy_sendQuery(self, *args)
BrokerProxy_swigregister = _qmfengine.BrokerProxy_swigregister
BrokerProxy_swigregister(BrokerProxy)

class ConsoleSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleSettings, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rcvObjects"] = _qmfengine.ConsoleSettings_rcvObjects_set
    __swig_getmethods__["rcvObjects"] = _qmfengine.ConsoleSettings_rcvObjects_get
    if _newclass:rcvObjects = _swig_property(_qmfengine.ConsoleSettings_rcvObjects_get, _qmfengine.ConsoleSettings_rcvObjects_set)
    __swig_setmethods__["rcvEvents"] = _qmfengine.ConsoleSettings_rcvEvents_set
    __swig_getmethods__["rcvEvents"] = _qmfengine.ConsoleSettings_rcvEvents_get
    if _newclass:rcvEvents = _swig_property(_qmfengine.ConsoleSettings_rcvEvents_get, _qmfengine.ConsoleSettings_rcvEvents_set)
    __swig_setmethods__["rcvHeartbeats"] = _qmfengine.ConsoleSettings_rcvHeartbeats_set
    __swig_getmethods__["rcvHeartbeats"] = _qmfengine.ConsoleSettings_rcvHeartbeats_get
    if _newclass:rcvHeartbeats = _swig_property(_qmfengine.ConsoleSettings_rcvHeartbeats_get, _qmfengine.ConsoleSettings_rcvHeartbeats_set)
    __swig_setmethods__["userBindings"] = _qmfengine.ConsoleSettings_userBindings_set
    __swig_getmethods__["userBindings"] = _qmfengine.ConsoleSettings_userBindings_get
    if _newclass:userBindings = _swig_property(_qmfengine.ConsoleSettings_userBindings_get, _qmfengine.ConsoleSettings_userBindings_set)
    def __init__(self): 
        this = _qmfengine.new_ConsoleSettings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ConsoleSettings
    __del__ = lambda self : None;
ConsoleSettings_swigregister = _qmfengine.ConsoleSettings_swigregister
ConsoleSettings_swigregister(ConsoleSettings)

class Console(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Console, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Console, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Console(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Console
    __del__ = lambda self : None;
    def getEvent(self, *args): return _qmfengine.Console_getEvent(self, *args)
    def popEvent(self): return _qmfengine.Console_popEvent(self)
    def addConnection(self, *args): return _qmfengine.Console_addConnection(self, *args)
    def delConnection(self, *args): return _qmfengine.Console_delConnection(self, *args)
    def packageCount(self): return _qmfengine.Console_packageCount(self)
    def getPackageName(self, *args): return _qmfengine.Console_getPackageName(self, *args)
    def classCount(self, *args): return _qmfengine.Console_classCount(self, *args)
    def getClass(self, *args): return _qmfengine.Console_getClass(self, *args)
    def getClassKind(self, *args): return _qmfengine.Console_getClassKind(self, *args)
    def getObjectClass(self, *args): return _qmfengine.Console_getObjectClass(self, *args)
    def getEventClass(self, *args): return _qmfengine.Console_getEventClass(self, *args)
    def bindPackage(self, *args): return _qmfengine.Console_bindPackage(self, *args)
    def bindClass(self, *args): return _qmfengine.Console_bindClass(self, *args)
    def bindEvent(self, *args): return _qmfengine.Console_bindEvent(self, *args)
Console_swigregister = _qmfengine.Console_swigregister
Console_swigregister(Console)

class ConnectionSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_ConnectionSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ConnectionSettings
    __del__ = lambda self : None;
    def setAttr(self, *args): return _qmfengine.ConnectionSettings_setAttr(self, *args)
    def getAttr(self, *args): return _qmfengine.ConnectionSettings_getAttr(self, *args)
    def getAttrString(self): return _qmfengine.ConnectionSettings_getAttrString(self)
    def transportTcp(self, port = 5672): return _qmfengine.ConnectionSettings_transportTcp(self, port)
    def transportSsl(self, port = 5671): return _qmfengine.ConnectionSettings_transportSsl(self, port)
    def transportRdma(self, port = 5672): return _qmfengine.ConnectionSettings_transportRdma(self, port)
    def authAnonymous(self, username = None): return _qmfengine.ConnectionSettings_authAnonymous(self, username)
    def authPlain(self, username = None, password = None): return _qmfengine.ConnectionSettings_authPlain(self, username, password)
    def authGssapi(self, *args): return _qmfengine.ConnectionSettings_authGssapi(self, *args)
    def setRetry(self, delayMin = 1, delayMax = 128, delayFactor = 2): return _qmfengine.ConnectionSettings_setRetry(self, delayMin, delayMax, delayFactor)
ConnectionSettings_swigregister = _qmfengine.ConnectionSettings_swigregister
ConnectionSettings_swigregister(ConnectionSettings)

class ResilientConnectionEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResilientConnectionEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResilientConnectionEvent, name)
    __repr__ = _swig_repr
    CONNECTED = _qmfengine.ResilientConnectionEvent_CONNECTED
    DISCONNECTED = _qmfengine.ResilientConnectionEvent_DISCONNECTED
    SESSION_CLOSED = _qmfengine.ResilientConnectionEvent_SESSION_CLOSED
    RECV = _qmfengine.ResilientConnectionEvent_RECV
    __swig_setmethods__["kind"] = _qmfengine.ResilientConnectionEvent_kind_set
    __swig_getmethods__["kind"] = _qmfengine.ResilientConnectionEvent_kind_get
    if _newclass:kind = _swig_property(_qmfengine.ResilientConnectionEvent_kind_get, _qmfengine.ResilientConnectionEvent_kind_set)
    __swig_setmethods__["sessionContext"] = _qmfengine.ResilientConnectionEvent_sessionContext_set
    __swig_getmethods__["sessionContext"] = _qmfengine.ResilientConnectionEvent_sessionContext_get
    if _newclass:sessionContext = _swig_property(_qmfengine.ResilientConnectionEvent_sessionContext_get, _qmfengine.ResilientConnectionEvent_sessionContext_set)
    __swig_setmethods__["errorText"] = _qmfengine.ResilientConnectionEvent_errorText_set
    __swig_getmethods__["errorText"] = _qmfengine.ResilientConnectionEvent_errorText_get
    if _newclass:errorText = _swig_property(_qmfengine.ResilientConnectionEvent_errorText_get, _qmfengine.ResilientConnectionEvent_errorText_set)
    __swig_setmethods__["message"] = _qmfengine.ResilientConnectionEvent_message_set
    __swig_getmethods__["message"] = _qmfengine.ResilientConnectionEvent_message_get
    if _newclass:message = _swig_property(_qmfengine.ResilientConnectionEvent_message_get, _qmfengine.ResilientConnectionEvent_message_set)
    def __init__(self): 
        this = _qmfengine.new_ResilientConnectionEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ResilientConnectionEvent
    __del__ = lambda self : None;
ResilientConnectionEvent_swigregister = _qmfengine.ResilientConnectionEvent_swigregister
ResilientConnectionEvent_swigregister(ResilientConnectionEvent)

class SessionHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionHandle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _qmfengine.new_SessionHandle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SessionHandle
    __del__ = lambda self : None;
SessionHandle_swigregister = _qmfengine.SessionHandle_swigregister
SessionHandle_swigregister(SessionHandle)

class ResilientConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResilientConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResilientConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_ResilientConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ResilientConnection
    __del__ = lambda self : None;
    def isConnected(self): return _qmfengine.ResilientConnection_isConnected(self)
    def getEvent(self, *args): return _qmfengine.ResilientConnection_getEvent(self, *args)
    def popEvent(self): return _qmfengine.ResilientConnection_popEvent(self)
    def createSession(self, *args): return _qmfengine.ResilientConnection_createSession(self, *args)
    def destroySession(self, *args): return _qmfengine.ResilientConnection_destroySession(self, *args)
    def sendMessage(self, *args): return _qmfengine.ResilientConnection_sendMessage(self, *args)
    def declareQueue(self, *args): return _qmfengine.ResilientConnection_declareQueue(self, *args)
    def deleteQueue(self, *args): return _qmfengine.ResilientConnection_deleteQueue(self, *args)
    def bind(self, *args): return _qmfengine.ResilientConnection_bind(self, *args)
    def unbind(self, *args): return _qmfengine.ResilientConnection_unbind(self, *args)
    def setNotifyFd(self, *args): return _qmfengine.ResilientConnection_setNotifyFd(self, *args)
    def notify(self): return _qmfengine.ResilientConnection_notify(self)
ResilientConnection_swigregister = _qmfengine.ResilientConnection_swigregister
ResilientConnection_swigregister(ResilientConnection)

TYPE_UINT8 = _qmfengine.TYPE_UINT8
TYPE_UINT16 = _qmfengine.TYPE_UINT16
TYPE_UINT32 = _qmfengine.TYPE_UINT32
TYPE_UINT64 = _qmfengine.TYPE_UINT64
TYPE_SSTR = _qmfengine.TYPE_SSTR
TYPE_LSTR = _qmfengine.TYPE_LSTR
TYPE_ABSTIME = _qmfengine.TYPE_ABSTIME
TYPE_DELTATIME = _qmfengine.TYPE_DELTATIME
TYPE_REF = _qmfengine.TYPE_REF
TYPE_BOOL = _qmfengine.TYPE_BOOL
TYPE_FLOAT = _qmfengine.TYPE_FLOAT
TYPE_DOUBLE = _qmfengine.TYPE_DOUBLE
TYPE_UUID = _qmfengine.TYPE_UUID
TYPE_MAP = _qmfengine.TYPE_MAP
TYPE_INT8 = _qmfengine.TYPE_INT8
TYPE_INT16 = _qmfengine.TYPE_INT16
TYPE_INT32 = _qmfengine.TYPE_INT32
TYPE_INT64 = _qmfengine.TYPE_INT64
TYPE_OBJECT = _qmfengine.TYPE_OBJECT
TYPE_LIST = _qmfengine.TYPE_LIST
TYPE_ARRAY = _qmfengine.TYPE_ARRAY
ACCESS_READ_CREATE = _qmfengine.ACCESS_READ_CREATE
ACCESS_READ_WRITE = _qmfengine.ACCESS_READ_WRITE
ACCESS_READ_ONLY = _qmfengine.ACCESS_READ_ONLY
DIR_IN = _qmfengine.DIR_IN
DIR_OUT = _qmfengine.DIR_OUT
DIR_IN_OUT = _qmfengine.DIR_IN_OUT
CLASS_OBJECT = _qmfengine.CLASS_OBJECT
CLASS_EVENT = _qmfengine.CLASS_EVENT
SEV_EMERG = _qmfengine.SEV_EMERG
SEV_ALERT = _qmfengine.SEV_ALERT
SEV_CRIT = _qmfengine.SEV_CRIT
SEV_ERROR = _qmfengine.SEV_ERROR
SEV_WARN = _qmfengine.SEV_WARN
SEV_NOTICE = _qmfengine.SEV_NOTICE
SEV_INFORM = _qmfengine.SEV_INFORM
SEV_DEBUG = _qmfengine.SEV_DEBUG
class SchemaArgument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaArgument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaArgument, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaArgument(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaArgument
    __del__ = lambda self : None;
    def setDirection(self, *args): return _qmfengine.SchemaArgument_setDirection(self, *args)
    def setUnit(self, *args): return _qmfengine.SchemaArgument_setUnit(self, *args)
    def setDesc(self, *args): return _qmfengine.SchemaArgument_setDesc(self, *args)
    def getName(self): return _qmfengine.SchemaArgument_getName(self)
    def getType(self): return _qmfengine.SchemaArgument_getType(self)
    def getDirection(self): return _qmfengine.SchemaArgument_getDirection(self)
    def getUnit(self): return _qmfengine.SchemaArgument_getUnit(self)
    def getDesc(self): return _qmfengine.SchemaArgument_getDesc(self)
SchemaArgument_swigregister = _qmfengine.SchemaArgument_swigregister
SchemaArgument_swigregister(SchemaArgument)

class SchemaMethod(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaMethod, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaMethod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaMethod
    __del__ = lambda self : None;
    def addArgument(self, *args): return _qmfengine.SchemaMethod_addArgument(self, *args)
    def setDesc(self, *args): return _qmfengine.SchemaMethod_setDesc(self, *args)
    def getName(self): return _qmfengine.SchemaMethod_getName(self)
    def getDesc(self): return _qmfengine.SchemaMethod_getDesc(self)
    def getArgumentCount(self): return _qmfengine.SchemaMethod_getArgumentCount(self)
    def getArgument(self, *args): return _qmfengine.SchemaMethod_getArgument(self, *args)
SchemaMethod_swigregister = _qmfengine.SchemaMethod_swigregister
SchemaMethod_swigregister(SchemaMethod)

class SchemaProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaProperty
    __del__ = lambda self : None;
    def setAccess(self, *args): return _qmfengine.SchemaProperty_setAccess(self, *args)
    def setIndex(self, *args): return _qmfengine.SchemaProperty_setIndex(self, *args)
    def setOptional(self, *args): return _qmfengine.SchemaProperty_setOptional(self, *args)
    def setUnit(self, *args): return _qmfengine.SchemaProperty_setUnit(self, *args)
    def setDesc(self, *args): return _qmfengine.SchemaProperty_setDesc(self, *args)
    def getName(self): return _qmfengine.SchemaProperty_getName(self)
    def getType(self): return _qmfengine.SchemaProperty_getType(self)
    def getAccess(self): return _qmfengine.SchemaProperty_getAccess(self)
    def isIndex(self): return _qmfengine.SchemaProperty_isIndex(self)
    def isOptional(self): return _qmfengine.SchemaProperty_isOptional(self)
    def getUnit(self): return _qmfengine.SchemaProperty_getUnit(self)
    def getDesc(self): return _qmfengine.SchemaProperty_getDesc(self)
SchemaProperty_swigregister = _qmfengine.SchemaProperty_swigregister
SchemaProperty_swigregister(SchemaProperty)

class SchemaStatistic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaStatistic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaStatistic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaStatistic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaStatistic
    __del__ = lambda self : None;
    def setUnit(self, *args): return _qmfengine.SchemaStatistic_setUnit(self, *args)
    def setDesc(self, *args): return _qmfengine.SchemaStatistic_setDesc(self, *args)
    def getName(self): return _qmfengine.SchemaStatistic_getName(self)
    def getType(self): return _qmfengine.SchemaStatistic_getType(self)
    def getUnit(self): return _qmfengine.SchemaStatistic_getUnit(self)
    def getDesc(self): return _qmfengine.SchemaStatistic_getDesc(self)
SchemaStatistic_swigregister = _qmfengine.SchemaStatistic_swigregister
SchemaStatistic_swigregister(SchemaStatistic)

class SchemaClassKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaClassKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaClassKey, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaClassKey(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaClassKey
    __del__ = lambda self : None;
    def getPackageName(self): return _qmfengine.SchemaClassKey_getPackageName(self)
    def getClassName(self): return _qmfengine.SchemaClassKey_getClassName(self)
    def getHash(self): return _qmfengine.SchemaClassKey_getHash(self)
    def asString(self): return _qmfengine.SchemaClassKey_asString(self)
    def __eq__(self, *args): return _qmfengine.SchemaClassKey___eq__(self, *args)
    def __lt__(self, *args): return _qmfengine.SchemaClassKey___lt__(self, *args)
SchemaClassKey_swigregister = _qmfengine.SchemaClassKey_swigregister
SchemaClassKey_swigregister(SchemaClassKey)

class SchemaObjectClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaObjectClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaObjectClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaObjectClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaObjectClass
    __del__ = lambda self : None;
    def addProperty(self, *args): return _qmfengine.SchemaObjectClass_addProperty(self, *args)
    def addStatistic(self, *args): return _qmfengine.SchemaObjectClass_addStatistic(self, *args)
    def addMethod(self, *args): return _qmfengine.SchemaObjectClass_addMethod(self, *args)
    def getClassKey(self): return _qmfengine.SchemaObjectClass_getClassKey(self)
    def getPropertyCount(self): return _qmfengine.SchemaObjectClass_getPropertyCount(self)
    def getStatisticCount(self): return _qmfengine.SchemaObjectClass_getStatisticCount(self)
    def getMethodCount(self): return _qmfengine.SchemaObjectClass_getMethodCount(self)
    def getProperty(self, *args): return _qmfengine.SchemaObjectClass_getProperty(self, *args)
    def getStatistic(self, *args): return _qmfengine.SchemaObjectClass_getStatistic(self, *args)
    def getMethod(self, *args): return _qmfengine.SchemaObjectClass_getMethod(self, *args)
SchemaObjectClass_swigregister = _qmfengine.SchemaObjectClass_swigregister
SchemaObjectClass_swigregister(SchemaObjectClass)

class SchemaEventClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchemaEventClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchemaEventClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_SchemaEventClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_SchemaEventClass
    __del__ = lambda self : None;
    def addArgument(self, *args): return _qmfengine.SchemaEventClass_addArgument(self, *args)
    def setDesc(self, *args): return _qmfengine.SchemaEventClass_setDesc(self, *args)
    def getClassKey(self): return _qmfengine.SchemaEventClass_getClassKey(self)
    def getSeverity(self): return _qmfengine.SchemaEventClass_getSeverity(self)
    def getArgumentCount(self): return _qmfengine.SchemaEventClass_getArgumentCount(self)
    def getArgument(self, *args): return _qmfengine.SchemaEventClass_getArgument(self, *args)
SchemaEventClass_swigregister = _qmfengine.SchemaEventClass_swigregister
SchemaEventClass_swigregister(SchemaEventClass)

class Value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Value
    __del__ = lambda self : None;
    def getType(self): return _qmfengine.Value_getType(self)
    def isNull(self): return _qmfengine.Value_isNull(self)
    def setNull(self): return _qmfengine.Value_setNull(self)
    def isObjectId(self): return _qmfengine.Value_isObjectId(self)
    def asObjectId(self): return _qmfengine.Value_asObjectId(self)
    def setObjectId(self, *args): return _qmfengine.Value_setObjectId(self, *args)
    def isUint(self): return _qmfengine.Value_isUint(self)
    def asUint(self): return _qmfengine.Value_asUint(self)
    def setUint(self, *args): return _qmfengine.Value_setUint(self, *args)
    def isInt(self): return _qmfengine.Value_isInt(self)
    def asInt(self): return _qmfengine.Value_asInt(self)
    def setInt(self, *args): return _qmfengine.Value_setInt(self, *args)
    def isUint64(self): return _qmfengine.Value_isUint64(self)
    def asUint64(self): return _qmfengine.Value_asUint64(self)
    def setUint64(self, *args): return _qmfengine.Value_setUint64(self, *args)
    def isInt64(self): return _qmfengine.Value_isInt64(self)
    def asInt64(self): return _qmfengine.Value_asInt64(self)
    def setInt64(self, *args): return _qmfengine.Value_setInt64(self, *args)
    def isString(self): return _qmfengine.Value_isString(self)
    def asString(self): return _qmfengine.Value_asString(self)
    def setString(self, *args): return _qmfengine.Value_setString(self, *args)
    def isBool(self): return _qmfengine.Value_isBool(self)
    def asBool(self): return _qmfengine.Value_asBool(self)
    def setBool(self, *args): return _qmfengine.Value_setBool(self, *args)
    def isFloat(self): return _qmfengine.Value_isFloat(self)
    def asFloat(self): return _qmfengine.Value_asFloat(self)
    def setFloat(self, *args): return _qmfengine.Value_setFloat(self, *args)
    def isDouble(self): return _qmfengine.Value_isDouble(self)
    def asDouble(self): return _qmfengine.Value_asDouble(self)
    def setDouble(self, *args): return _qmfengine.Value_setDouble(self, *args)
    def isUuid(self): return _qmfengine.Value_isUuid(self)
    def asUuid(self): return _qmfengine.Value_asUuid(self)
    def setUuid(self, *args): return _qmfengine.Value_setUuid(self, *args)
    def isObject(self): return _qmfengine.Value_isObject(self)
    def asObject(self): return _qmfengine.Value_asObject(self)
    def setObject(self, *args): return _qmfengine.Value_setObject(self, *args)
    def isMap(self): return _qmfengine.Value_isMap(self)
    def keyInMap(self, *args): return _qmfengine.Value_keyInMap(self, *args)
    def byKey(self, *args): return _qmfengine.Value_byKey(self, *args)
    def deleteKey(self, *args): return _qmfengine.Value_deleteKey(self, *args)
    def insert(self, *args): return _qmfengine.Value_insert(self, *args)
    def keyCount(self): return _qmfengine.Value_keyCount(self)
    def key(self, *args): return _qmfengine.Value_key(self, *args)
    def isList(self): return _qmfengine.Value_isList(self)
    def listItemCount(self): return _qmfengine.Value_listItemCount(self)
    def listItem(self, *args): return _qmfengine.Value_listItem(self, *args)
    def appendToList(self, *args): return _qmfengine.Value_appendToList(self, *args)
    def deleteListItem(self, *args): return _qmfengine.Value_deleteListItem(self, *args)
    def isArray(self): return _qmfengine.Value_isArray(self)
    def arrayType(self): return _qmfengine.Value_arrayType(self)
    def arrayItemCount(self): return _qmfengine.Value_arrayItemCount(self)
    def arrayItem(self, *args): return _qmfengine.Value_arrayItem(self, *args)
    def appendToArray(self, *args): return _qmfengine.Value_appendToArray(self, *args)
    def deleteArrayItem(self, *args): return _qmfengine.Value_deleteArrayItem(self, *args)
Value_swigregister = _qmfengine.Value_swigregister
Value_swigregister(Value)

class ObjectId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_ObjectId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_ObjectId
    __del__ = lambda self : None;
    def getObjectNum(self): return _qmfengine.ObjectId_getObjectNum(self)
    def getObjectNumHi(self): return _qmfengine.ObjectId_getObjectNumHi(self)
    def getObjectNumLo(self): return _qmfengine.ObjectId_getObjectNumLo(self)
    def isDurable(self): return _qmfengine.ObjectId_isDurable(self)
    def str(self): return _qmfengine.ObjectId_str(self)
    def getFlags(self): return _qmfengine.ObjectId_getFlags(self)
    def getSequence(self): return _qmfengine.ObjectId_getSequence(self)
    def getBrokerBank(self): return _qmfengine.ObjectId_getBrokerBank(self)
    def getAgentBank(self): return _qmfengine.ObjectId_getAgentBank(self)
    def __eq__(self, *args): return _qmfengine.ObjectId___eq__(self, *args)
    def __lt__(self, *args): return _qmfengine.ObjectId___lt__(self, *args)
    def __gt__(self, *args): return _qmfengine.ObjectId___gt__(self, *args)
    def __le__(self, *args): return _qmfengine.ObjectId___le__(self, *args)
    def __ge__(self, *args): return _qmfengine.ObjectId___ge__(self, *args)
ObjectId_swigregister = _qmfengine.ObjectId_swigregister
ObjectId_swigregister(ObjectId)

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Object(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Object
    __del__ = lambda self : None;
    def destroy(self): return _qmfengine.Object_destroy(self)
    def getObjectId(self): return _qmfengine.Object_getObjectId(self)
    def setObjectId(self, *args): return _qmfengine.Object_setObjectId(self, *args)
    def getClass(self): return _qmfengine.Object_getClass(self)
    def getValue(self, *args): return _qmfengine.Object_getValue(self, *args)
    def invokeMethod(self, *args): return _qmfengine.Object_invokeMethod(self, *args)
    def isDeleted(self): return _qmfengine.Object_isDeleted(self)
    def merge(self, *args): return _qmfengine.Object_merge(self, *args)
Object_swigregister = _qmfengine.Object_swigregister
Object_swigregister(Object)

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _qmfengine.new_Event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _qmfengine.delete_Event
    __del__ = lambda self : None;
    def getClass(self): return _qmfengine.Event_getClass(self)
    def getValue(self, *args): return _qmfengine.Event_getValue(self, *args)
Event_swigregister = _qmfengine.Event_swigregister
Event_swigregister(Event)

# This file is compatible with both classic and new-style classes.


